--- a/src/net/minecraft/client/gui/FontRenderer.java
+++ b/src/net/minecraft/client/gui/FontRenderer.java
@@ -20,11 +20,16 @@ import net.minecraft.client.settings.GameSettings;
 import net.minecraft.util.ChatAllowedCharacters;
 import net.minecraft.util.ResourceLocation;
 import org.lwjgl.opengl.GL11;
+import betterfonts.ConfigParser;
+import betterfonts.StringCache;
 
 @SideOnly(Side.CLIENT)
 public class FontRenderer implements ResourceManagerReloadListener
 {
     private static final ResourceLocation[] unicodePageLocations = new ResourceLocation[256];
+    public static boolean betterFontsEnabled = true;
+    public StringCache stringCache;
+    public boolean dropShadowEnabled = true;
 
     /** Array of width of all the characters in default.png */
     private int[] charWidth = new int[256];
@@ -136,6 +141,26 @@ public class FontRenderer implements ResourceManagerReloadListener
 
             this.colorCode[i] = (k & 255) << 16 | (l & 255) << 8 | i1 & 255;
         }
+        /*
+         * Only use OpenType rendering for the primary FontRenderer and not for the enchantment table Standard Galactic renderer.
+         * Also, mcpatcher will call initialize() when switching texture packs to reload the bitmap font, but the StringCache
+         * should not be re-created a second time or it will leak OpenGL textures.
+         */
+        if (par2ResourceLocation.getResourcePath().contains("ascii.png") && this.stringCache == null)
+        {
+            this.stringCache = new StringCache(this.colorCode);
+            /* Read optional config file to override the default font name/size */
+            ConfigParser config = new ConfigParser();
+            if (config.loadConfig("/config/BetterFonts.cfg"))
+            {
+                String fontName = config.getFontName("SansSerif");
+                int fontSize = config.getFontSize(18);
+                boolean antiAlias = config.getBoolean("font.antialias", false);
+                dropShadowEnabled = config.getBoolean("font.dropshadow", true);
+                this.stringCache.setDefaultFont(fontName, fontSize, antiAlias);
+                System.out.println("BetterFonts configuration loaded");
+            }
+        }
 
         this.readGlyphSizes();
     }
@@ -339,7 +364,7 @@ public class FontRenderer implements ResourceManagerReloadListener
 
         int l;
 
-        if (par5)
+        if (par5 && dropShadowEnabled)
         {
             l = this.renderString(par1Str, par2 + 1, par3 + 1, par4, true);
             l = Math.max(l, this.renderString(par1Str, par2, par3, par4, false));
@@ -357,6 +382,10 @@ public class FontRenderer implements ResourceManagerReloadListener
      */
     private String bidiReorder(String par1Str)
     {
+        if (this.betterFontsEnabled && this.stringCache != null)
+        {
+            return par1Str;
+        }
         if (par1Str != null && Bidi.requiresBidi(par1Str.toCharArray(), 0, par1Str.length()))
         {
             Bidi bidi = new Bidi(par1Str, -2);
@@ -645,7 +674,14 @@ public class FontRenderer implements ResourceManagerReloadListener
             GL11.glColor4f(this.red, this.blue, this.green, this.alpha);
             this.posX = (float)par2;
             this.posY = (float)par3;
-            this.renderStringAtPos(par1Str, par5);
+            if (this.betterFontsEnabled && this.stringCache != null)
+            {
+                this.posX += stringCache.renderString(par1Str, par2, par3, par4, par5);
+            }
+            else
+            {
+                this.renderStringAtPos(par1Str, par5);
+            }
             return (int)this.posX;
         }
     }
@@ -655,6 +691,10 @@ public class FontRenderer implements ResourceManagerReloadListener
      */
     public int getStringWidth(String par1Str)
     {
+        if (this.betterFontsEnabled && this.stringCache != null)
+        {
+            return this.stringCache.getStringWidth(par1Str);
+        }
         if (par1Str == null)
         {
             return 0;
@@ -756,6 +796,10 @@ public class FontRenderer implements ResourceManagerReloadListener
      */
     public String trimStringToWidth(String par1Str, int par2, boolean par3)
     {
+        if (this.betterFontsEnabled && this.stringCache != null)
+        {
+            return this.stringCache.trimStringToWidth(par1Str, par2, par3);
+        }
         StringBuilder stringbuilder = new StringBuilder();
         int j = 0;
         int k = par3 ? par1Str.length() - 1 : 0;
@@ -923,6 +967,10 @@ public class FontRenderer implements ResourceManagerReloadListener
      */
     private int sizeStringToWidth(String par1Str, int par2)
     {
+        if (this.betterFontsEnabled && this.stringCache != null)
+        {
+            return this.stringCache.sizeStringToWidth(par1Str, par2);
+        }
         int j = par1Str.length();
         int k = 0;
         int l = 0;
